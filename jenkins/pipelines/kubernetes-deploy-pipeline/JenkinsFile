pipeline {
    agent {
        label 'jenkins-slave'
    }
    environment {
        PATH = "/home/jenkins-slave/.local/bin/:${env.PATH}" // Add Ansible bin directory to PATH
        SECRET_NAME = "${env.cluster_name}-jenkins-sa-kubeconf" // Define the name of your secret in AWS Secrets Manager
    }
    options {
        timeout(time: 30, unit: 'MINUTES') // Timeout for the entire pipeline
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout code
                    git branch: "${env.branch_name}", credentialsId: 'github-pedro', url: params.git_url
                }
            }
        }
        stage('Run TFLint') {
            when {
                expression { env.TFLINT == 'true' }
            }
            steps {
                script {
                    // Run TFLint
                    dir('terraform/environments/stage') {
                        sh 'tflint --format=json > tflint-results.json'
                        def tflintResults = readJSON file: 'tflint-results.json'
                        if (tflintResults.errors.size() > 0) {
                            error("TFLint reported errors.")
                        }
                    }
                }
            }
        }
        stage('Run Checkov') {
            when {
                expression { env.CHECKOV == 'true' }
            }
            steps {
                script {
                    // Initialize flag variable
                    def checkovFailed = false

                    // Run Checkov
                    dir('terraform/environments/stage') {
                        try {
                            sh 'checkov -d . --quiet --framework terraform --output json > checkov-results.json'
                            def checkovResults = readJSON file: 'checkov-results.json'
                            if (checkovResults.results.failed_checks) {
                                checkovFailed = true
                            }
                        } catch (FileNotFoundException e) {
                            checkovFailed = true
                            error("Checkov results file not found: ${e.message}")
                        } catch (Exception e) {
                            checkovFailed = true
                            echo "Error running Checkov: ${e.message}"
                        }
                    }
                    // Archive Checkov results
                    if (checkovFailed) {
                        archiveArtifacts artifacts: 'terraform/environments/stage/checkov-results.json', onlyIfSuccessful: false
                        error("Checkov step failed.")
                    }
                }
            }
        }

        stage('Run TFSec') {
            when {
                expression { env.TFSEC == 'true' }
            }
            steps {
                script {
                    // Run TFSec
                    dir('terraform/environments/stage') {
                        sh 'tfsec . --format=json --soft-fail > tfsec-results.json'
                        def tfsecResults = readJSON file: 'tfsec-results.json'
                        if (tfsecResults.results.any { result -> result.severity == "CRITICAL" }) {
                            error("Critical alerts found by TFSec.")
                        }
                    }
                }
                // Archive TFSec results
                archiveArtifacts artifacts: 'terraform/environments/stage/tfsec-results.json', onlyIfSuccessful: false
            }
        }
        stage('Terraform init, plan, apply') {
            steps {
                dir('terraform/environments/stage') {
                    script {
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'jenkins-automate-user',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            sh 'terraform init'
                            sh 'terraform validate'
                            sh 'terraform plan -out=plan.out'
                            input message: 'Do you want to apply the Terraform plan?', ok: 'Yes'
                            sh 'terraform apply plan.out'
                        }
                    }
                }
            }
        }
    }
    //         stage('Retrieve Kubeconfig from AWS Secrets Manager') {
    //             steps {
    //                 script {
    //                     // Use the credentials binding plugin to securely inject AWS credentials
    //                     withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-ecr-access', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
    //                         // Retrieve the kubeconfig from AWS Secrets Manager
    //                         sh '''
    //                         aws secretsmanager get-secret-value --region us-east-1 --secret-id ${SECRET_NAME} --query SecretString --output text > kubeconfig
    //                         '''
    //
    //                         // Set the KUBECONFIG environment variable for subsequent steps
    //                         env.KUBECONFIG = "${WORKSPACE}/kubeconfig"
    //                     }
    //                 }
    //             }
    //         }
    //
    //         stage('Install Istio') {
    //             steps {
    //                 sh """
    //                 ${env.ansible_dir}/ansible-playbook playbooks/istio-install.yml -vvv
    //                 """
    //             }
    //         }
    //     }
    //     post {
    //         always {
    //             // Cleanup
    //             cleanWs()
    //         }
    //     }
    // }
    post {
        always {
            // Archive TFLint and TFSec results
//             archiveArtifacts artifacts: 'terraform/environments/stage/tflint-results.json', onlyIfSuccessful: false
//             archiveArtifacts artifacts: 'terraform/environments/stage/tfsec-results.json', onlyIfSuccessful: false
//             archiveArtifacts artifacts: 'terraform/environments/stage/checkov-results.json', onlyIfSuccessful: true
            // Cleanup
           cleanWs()
        }
    }
}
